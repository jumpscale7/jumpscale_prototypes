#!/usr/bin/env python
from JumpScale import j
from JumpScale.baselib import cmdutils
import JumpScale.lib.lxc
import JumpScale.lib.diskmanager

j.application.start("jsmachine_lxc")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['ps','new','list','destroyall','destroy','configure','rdp','ssh','start','stop','restart','mountdisks','unmountdisks'], help='Command to perform')
parser.add_argument("-n", '--name', help='machine name')
parser.add_argument("-b", '--base', help='base to clone from')
parser.add_argument("-p",'--passwd', help='password for machine')
parser.add_argument("-r",'--prefix', help='prefix')


opts = parser.parse_args()

l=j.system.platform.lxc

if opts.prefix<>None:
    l.prefix=opts.prefix

############PS
if opts.action =='ps':
    if opts.name==None:
        raise RuntimeError("specify machine name")    
    l.getProcessList(opts.name)


##########NEW
if opts.action =='list':
    running,stopped=l.list()
    print "## running:"
    for item in running:
        print "  machine: %s"%item
    print "## stopped:"
    for item in stopped:
        print "  machine: %s"%item


if opts.action =='new':
    if opts.base==None:
        opts.base="base"
    if opts.name==None:
        opts.name=""
    l.createMachine(name=opts.name,stdout=True,base=opts.base)

if opts.action =='configure':
    if opts.name==None:
        raise RuntimeError("specify machine name")    
    if ip=="":
        ip=getip(opts.nr)
    import JumpScale.baselib.remote

    # #this will make sure new password is set
    # seedpasswd="rooter"
    cl=j.tools.expect.new("sh")

    if opts.passwd==None:
        opts.passwd="rooter"
    

    if j.system.net.waitConnectionTest(ip,22,5)==False:
        print "could not connect to port:%s on ip:%s"%(22,ip)
        j.application.stop(1)

    cl.login(remote=ip,passwd=opts.passwd,seedpasswd="",initial=True)

    cl.send("/etc/init.d/xrdp start")

    #cl.wait()

    nr=0
    
    if j.system.net.waitConnectionTest(ip,3389,0.1)==False:
        if nr==10:
            print "could not connect to rdp port:%s on ip:%s"%(3389,ip)
            j.application.stop(1)            
        nr+=1

    print "machine:%s:%s:started"%(nr,ip)

if opts.action =='rdp':
    if opts.name==None:
        raise RuntimeError("specify machine name")    
    if ip=="":
        ip=getip(opts.nr)
    time.sleep(2)    
    j.system.net.waitConnectionTest(ip,3389,2)
    j.system.installtools.execute("rmachine %s -g 1600x900 -e & 2>&1 > /dev/null"%ip)


if opts.action =='destroyall':
    l.destroyall()

if opts.action =='destroy':
    if opts.name==None:
        raise RuntimeError("specify machine name")
    l.destroy(opts.name)

if opts.action =='stop':
    if opts.name==None:
        raise RuntimeError("specify machine name")
    l.stop(opts.name)

if opts.action =='start':
    if opts.name==None:
        raise RuntimeError("specify machine name")
    l.start(opts.name)

if opts.action =='restart':
    if opts.name==None:
        raise RuntimeError("specify machine name")
    l.stop(opts.name)
    l.start(opts.name)

if opts.action =="mountdisks":
    j.system.platform.diskmanager.partitionsFind()
    
    # j.system.platform.diskmanager.partitionsMount_Ext4Data()

if opts.action =="unmountdisks":
    j.system.platform.diskmanager.partitionsUnmount_Ext4Data()


j.application.stop()